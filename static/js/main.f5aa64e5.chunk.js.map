{"version":3,"sources":["DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","state","backgroundBtn","boxShadowBtn","outlineBtn","handleKeyPress","bind","handleKeyUp","handleClick","document","addEventListener","this","removeEventListener","event","keyCode","audio","play","currentTime","handleDisplay","id","setState","className","onClick","style","backgroundColor","boxShadow","keyTrigger","ref","src","url","React","Component","drumKey","App","display","map","d","onKeyDown","triggerKeyPress","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f5aa64e5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nclass DrumPad extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n        \tbackgroundBtn: '',\r\n        \tboxShadowBtn: '',\r\n        \toutlineBtn: ''\r\n        }\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        this.handleKeyUp = this.handleKeyUp.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n\tcomponentDidMount(){\r\n\t\tdocument.addEventListener('keydown', this.handleKeyPress)\r\n\t\tdocument.addEventListener('keyup', this.handleKeyUp)\r\n\t}\r\n\r\n    componentWillUnmount(){\r\n    \tdocument.removeEventListener('keydown', this.handleKeyPress)\r\n    \tdocument.removeEventListener('keyup', this.handleKeyUp)\r\n    }\r\n\r\n\thandleKeyPress(event){\r\n\t\tif(event.keyCode === this.props.keyCode){\r\n\t\t\tthis.audio.play()\r\n\t\t\tthis.audio.currentTime = 0\r\n\t\t\tthis.props.handleDisplay(this.props.id)\r\n\t\t\tthis.setState({\r\n\t\t\t\tbackgroundBtn: '#E06D48',\r\n\t\t\t\tboxShadowBtn: 'inset 3px 3px 2px #BD5E3E',\r\n\t\t\t\toutlineBtn: 'none'\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\thandleKeyUp(event){\r\n\t\tthis.setState({\r\n\t\t\tbackgroundBtn: '',\r\n\t\t\tboxShadowBtn: '',\r\n\t\t\toutlineBtn: ''\r\n\t\t})\r\n\t}\r\n\r\n\thandleClick(){\r\n\t\tthis.audio.play()\r\n\t\tthis.audio.currentTime = 0\r\n\t\tthis.props.handleDisplay(this.props.id)\r\n\t}\r\n\r\n    render(){\r\n        return (\r\n\t\t\t<div \r\n\t\t\t\tclassName=\"drum-pad\" \r\n\t\t\t\tid={this.props.id} \r\n\t\t\t\tonClick={this.handleClick}\r\n\t\t\t\tstyle={{backgroundColor: this.state.backgroundBtn, boxShadow: this.state.boxShadowBtn, outlineBtn: this.state.outlineBtn }}\r\n\t\t\t>\r\n\t\t\t\t<p>{this.props.keyTrigger}</p>\r\n\t\t\t\t<audio\r\n\t\t\t\t\tref={ref => this.audio = ref}\r\n\t\t\t\t\tclassName=\"clip\" \r\n\t\t\t\t\tsrc={this.props.url} \r\n\t\t\t\t\tid={this.props.keyTrigger}>\r\n\t\t\t\t</audio>\r\n\t\t\t</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DrumPad;\r\n","import React from 'react';\nimport DrumPad from './DrumPad.js'\nimport './App.css';\n\nlet drumKey = [\n        {\n            keyTrigger: 'Q',\n            keyCode: 81,\n            id: 'Heater-1',\n            url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n        },\n        {\n            keyTrigger: 'W',\n            keyCode: 87,\n            id: 'Heater-2',\n            url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n        },\n        {\n            keyTrigger: 'E',\n            keyCode: 69,\n            id: 'Heater-3',\n            url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n        },\n        {\n            keyTrigger: 'A',\n            keyCode: 65,\n            id: 'Heater-4',\n            url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n        },\n        {\n            keyTrigger: 'S',\n            keyCode: 83,\n            id: 'Clap',\n            url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n        },\n        {\n            keyTrigger: 'D',\n            keyCode: 68,\n            id: 'Open-HH',\n            url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n        },\n        {\n            keyTrigger: 'Z',\n            keyCode: 90,\n            id: 'Kick-n-Hat',\n            url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n        },\n        {\n            keyTrigger: 'X',\n            keyCode: 88,\n            id: 'Kick',\n            url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n        },\n        {\n            keyTrigger: 'C',\n            keyCode: 67,\n            id: 'Closed-HH',\n            url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n        }\n    ];\n\nclass App extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            display: '',\n        }\n        this.handleDisplay = this.handleDisplay.bind(this);\n    }\n    \n    handleDisplay(display){\n        this.setState({\n            display: display\n        })\n    }\n\n    render(){\n        return (\n            <div className=\"App\">\n            <div className=\"title\"><h1>DRUM MACHINE</h1></div>\n                <div id=\"drum-machine\">\n                        <div className=\"container-pad\">\n                            {drumKey.map(d => (\n                                <DrumPad \n                                    id={d.id}\n                                    keyTrigger={d.keyTrigger}\n                                    keyCode = {d.keyCode}\n                                    url={d.url}\n                                    onClick={this.handleClick}\n                                    onKeyDown={this.triggerKeyPress}\n                                    handleDisplay={this.handleDisplay}\n                                />\n                            ))}\n                        </div>\n                        <div id=\"display\">{this.state.display}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}